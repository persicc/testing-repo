datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String? @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  updatedAt DateTime @updatedAt

  Posts Post[]
  Comments Comment[]
  Likes Like[]

  createdAt DateTime @default(now())
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String 
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}

model Chatroom {
  id String @id @default(cuid()) @map("_id")
  messages Message[]

  createdAt DateTime @default(now())
}

model Message {
  id String @id @default(cuid()) @map("_id")
  text String
  read Boolean @default(false)
  senderId String
  chatroomId String
  chatroom Chatroom @relation(fields: [chatroomId], references: [id])

  createdAt DateTime @default(now())
}


model Post {
  id String @id @default(cuid()) @map("_id")
  desc String?
  img String
  Comments Comment[]
  Likes Like[]
  userId String
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  
}

model Comment {
  id String @id @default(cuid()) @map("_id")
  text String
  userId String
  user User @relation(fields: [userId], references: [id])
  postId String
  post Post @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
}

model Like {
  id String @id @default(cuid()) @map("_id")
  userId String
  User User @relation(fields: [userId], references: [id])
  postId String
  Post Post @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
}